{"version":3,"sources":["Components/Threads.js","Components/questionBox.js","Components/LogIn.js","App.js","serviceWorker.js","index.js"],"names":["Threads","existingThreads","onSave","inputComment","addComment","style","map","item","key","id","className","threadQuestion","threadComments","comment","type","value","commText","onChange","placeholder","onClick","QuestionBox","username","inputQuestion","question","addQuestion","backgroundColor","LogIn","userInput","setUser","color","App","props","event","setState","target","state","length","hasUsername","newThread","Math","random","list","push","console","log","existingThreads_renew","i","thread","newComm","slice","val","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.07368d31.chunk.js","sourcesContent":["import React from 'react';\r\nimport EdiText from 'react-editext';\r\nconst Threads = ({existingThreads,onSave,inputComment,addComment}) => {\r\nreturn (\r\n\t<div style={{}}>\r\n      {existingThreads.map((item)=>{\r\n        \r\n        return (\r\n          <div key={item.id}>\r\n            <div className=\"ba bw3  threadStyle\" style={{\"padding\":\"25px\",\"marginTop\":\"2em\"}}>\r\n            <p className=\"f2\"id=\"questionStyle\">{item.threadQuestion}</p>\r\n            \r\n            {item.threadComments.map(comment=>{\r\n              \r\n              return(\r\n                <div key={comment.id}>\r\n                \r\n                <EdiText\r\n        type='text'\r\n        value={comment.commText}\r\n        onSave={onSave}\r\n      />\r\n             \r\n                <hr/>\r\n                </div>\r\n                \r\n              );\r\n            })}\r\n            \r\n            <div style={{\"display\":\"flex\"}}>\r\n            <textarea className=\"commentBox\" onChange={inputComment(item.id)} value={item.comment} placeholder=\"Type your comment here...\"/> \r\n            <div>\r\n            <button style={{\"marginLeft\":\"15px\"}} className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-mid-gray\" \r\n            onClick={()=>addComment(item)}>Add new comm </button>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            \r\n          </div>\r\n        );\r\n      })}\r\n      </div>\r\n      );\r\n}\r\n\r\nexport default Threads;","import React from 'react';\r\n\r\nconst QuestionBox = ({username,inputQuestion,question,addQuestion}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t<p className=\"f3 i courier\">Hello, {username} </p>\r\n      <div>\r\n      <p className=\"f3 i courier\">Type your question here</p>\r\n       <textarea className=\"questionBox\" placeholder=\"Type question here...\"\r\n                 onChange={inputQuestion(question)} value={question}/>\r\n       <div>\r\n      <button  style={{\"marginTop\":\"15px\", backgroundColor:\"#121212\"}} className=\"link dim br-pill ba bw1 ph3 pv2 mb2 dib dark-gray\"\r\n       type=\"submit\"\r\n\r\n       onClick={addQuestion}>Add a question </button>\r\n        </div>\r\n        </div>\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default QuestionBox;","import React from 'react';\r\n\r\nconst LogIn = ({userInput,setUser}) => {\r\n\treturn (\r\n\t\t<div className=\"f3 tc\">\t\t\r\n\t <header>\r\n    <p className=\"siteName\"> NotStackOverflow</p>\r\n    </header>\r\n    <div className=\"ba bw3 br3 borderUser\">\r\n    <p style={{\"fontFamily\":\"'Roboto', sans-serif\"}}> Enter username </p>\r\n    \r\n     <input \r\n     type=\"text\"\r\n     placeholder=\"...\"\r\n     onChange={userInput}\r\n     className=\"pa3 ba b--green bg- \"\r\n     style={{\"borderRadius\":\"15px\",\"backgroundColor\":\"#121212\", color:\"#AAA9A7\", \"width\":\"50%\"}}\r\n     />\r\n     <div>\r\n     <button onClick={setUser}\r\n             className=\"link dim br-pill ba bw1 ph3 pv2 mb2 dib dark-gray\"\r\n             style={{\"marginTop\":\"15px\", backgroundColor:\"#121212\"}}>\r\n     Login\r\n     </button>\r\n     </div>\r\n     </div>\r\n     </div>\r\n\t);\r\n}\r\n\r\nexport default LogIn;","import React,{Component} from 'react';\nimport './App.css';\nimport {MDCTextField} from '@material/textfield';\nimport Threads from './Components/Threads';\nimport QuestionBox from './Components/questionBox';\nimport LogIn from './Components/LogIn';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state={\n      hasUsername:false,\n      username:\"\",\n      question:\"\",\n      existingThreads:[],\n      comment:\"\"\n\n    }\n  }\n\n/* FUNCTIONS*/\nuserInput = (event) => {\n  this.setState({\n    username: event.target.value\n  })\n}\n\nsetUser = () => {\n  if(this.state.username.length>0)\n  this.setState({\n    hasUsername:true\n  })\n}\n\ninputQuestion = question => (event) => {\n  this.setState({\n    question: event.target.value\n  })\n}\n\n\naddQuestion = () => {\n  if(this.state.question.length>0)\n  {\n const newThread={\n  threadQuestion:this.state.question,\n  threadComments:[],\n  id:1+Math.random(),\n  comment:\"\"\n }\n const list= [...this.state.existingThreads]\n list.push(newThread);\n this.setState({\n  question:\"\",\n  existingThreads:list\n },()=>{console.log(this.state.existingThreads)})\n  }}\ninputComment = item => (event) => {\n\nconst existingThreads_renew=[...this.state.existingThreads]\n  for(let i=0;i<existingThreads_renew.length;i++)\n  {\n    if(item===existingThreads_renew[i].id)\n    {\n      existingThreads_renew[i].comment=event.target.value\n      break;\n    }\n}\nthis.setState({\n    existingThreads_renew,\n  })\n}\n\n\naddComment = (thread) => {\n  const newComm={\n    commText:thread.comment.slice(),\n    id:1+Math.random(),\n  }\n  if(newComm.commText.length>0)\n  {\n  const existingThreads_renew=[...this.state.existingThreads]\n  for(let i=0;i<existingThreads_renew.length;i++)\n  {\n    if(thread.id===existingThreads_renew[i].id)\n    {\n      existingThreads_renew[i].threadComments.push(newComm);\n      existingThreads_renew[i].comment=\"\";\n      console.log(\"Thread has new comm\",existingThreads_renew[i]);\n      break;\n    }\n  }\n  this.setState({\n    existingThreads_renew,\n  })\n  console.log(\"ThreadComms\",thread.threadComments)\n}\n}\n\n\n onSave = val => {  \n}\n\n\n\n  render() {\n return (\n this.state.hasUsername===true ? \n  ( /*Feed page*/\n    <div className=\"App\">\n      <header>\n        <p className=\"siteName\"> NotStackOverflow</p>\n      </header>\n      <QuestionBox \n      username={this.state.username}\n      inputQuestion={this.inputQuestion}\n      question={this.state.question}\n      addQuestion={this.addQuestion} />\n      \n      <Threads  existingThreads={this.state.existingThreads} \n      onSave={this.onSave} \n      inputComment={this.inputComment} \n      addComment ={this.addComment}/>\n    </div>\n  ) \n\n  :\n\n\n  (  /*Log page*/\n    <LogIn userInput={this.userInput} setUser={this.setUser}/>\n  )\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}